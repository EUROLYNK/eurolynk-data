<style>
  body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background: #f9fafb;
    color: #333;
    margin: 0;
    padding: 0;
  }
  .grid-header {
    text-align: center;
    padding: 2rem;
    background: linear-gradient(90deg, #007BFF, #00C6FF);
    color: white;
    border-bottom: 4px solid #005bb5;
  }
  .filters {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 1rem;
    padding: 1rem;
    background: white;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    border-radius: 12px;
    margin: 1rem auto;
    width: 90%;
    max-width: 1200px;
  }
  .filters input, .filters select {
    padding: 0.6rem 1rem;
    border-radius: 8px;
    border: 1px solid #ccc;
    font-size: 1rem;
    flex: 1 1 200px;
    max-width: 250px;
  }
  .course-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
    padding: 2rem;
    width: 90%;
    max-width: 1300px;
    margin: auto;
  }
  .course-card {
    background: white;
    border-radius: 16px;
    overflow: hidden;
    text-decoration: none;
    color: inherit;
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }
  .course-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 20px rgba(0,0,0,0.15);
  }
  .course-card img {
    width: 100%;
    height: 180px;
    object-fit: contain;
    background: #f1f1f1;
    padding: 10px;
  }
  .course-card h2 {
    font-size: 1.2rem;
    margin: 0.5rem 1rem 0;
  }
  .course-card p {
    font-size: 0.95rem;
    margin: 0.5rem 1rem 1rem;
    color: #555;
  }
  .price-info {
    font-weight: bold;
    color: #007BFF;
    margin: 0 1rem 1rem;
  }
  .sub-tabs ul {
    list-style: none;
    padding: 0 1rem 1rem;
    margin: 0;
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }
  .sub-tabs li {
    background: #e6f0ff;
    color: #005bb5;
    padding: 0.3rem 0.7rem;
    border-radius: 8px;
    font-size: 0.8rem;
  }
</style>

<div class="grid-header">
  <h1>EuroLynk Course Directory</h1>
</div>

<div class="filters">
  <input type="text" id="searchInput" placeholder="Search courses...">
  <select id="countryFilter">
    <option value="">All Countries</option>
    <option value="Germany">Germany</option>
    <option value="France">France</option>
    <option value="Italy">Italy</option>
    <option value="Netherlands">Netherlands</option>
    <option value="Spain">Spain</option>
    <option value="Belgium">Belgium</option>
    <option value="Sweden">Sweden</option>
    <option value="Austria">Austria</option>
    <option value="Portugal">Portugal</option>
    <option value="Ireland">Ireland</option>
    <option value="Denmark">Denmark</option>
    <option value="Finland">Finland</option>
    <option value="Poland">Poland</option>
    <option value="Greece">Greece</option>
    <option value="Czech Republic">Czech Republic</option>
    <option value="Hungary">Hungary</option>
    <option value="Romania">Romania</option>
    <option value="Bulgaria">Bulgaria</option>
  </select>
  <select id="categoryFilter">
    <option value="">All Categories</option>
    <option value="Interview">Interview</option>
    <option value="CV">CV</option>
    <option value="Medical">Medical</option>
    <option value="Corporate">Corporate</option>
    <option value="IT">IT</option>
    <option value="Language">Language</option>
  </select>
  <select id="priceFilter">
    <option value="">All Prices</option>
    <option value="low">Under €100</option>
    <option value="mid">€100 - €300</option>
    <option value="high">Above €300</option>
  </select>
</div>

<div class="course-grid" id="courseGrid">
  <!-- Courses will be loaded dynamically here -->
</div>

<script>
  const searchInput = document.getElementById('searchInput');
  const countryFilter = document.getElementById('countryFilter');
  const categoryFilter = document.getElementById('categoryFilter');
  const priceFilter = document.getElementById('priceFilter');
  const courseGrid = document.getElementById('courseGrid');

  async function fetchCourses() {
    try {
      const response = await fetch('https://eurolynk.github.io/eurolynk-data/courses.json');
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      return data;
    } catch (error) {
      console.error('Error fetching courses:', error);
      return [];
    }
  }

  function renderCourses(coursesData) {
    courseGrid.innerHTML = '';
    const searchTerm = searchInput.value.toLowerCase();
    const selectedCountry = countryFilter.value;
    const selectedCategory = categoryFilter.value;
    const selectedPrice = priceFilter.value;

    coursesData.forEach(course => {
      const matchesSearch = course.title.toLowerCase().includes(searchTerm);
      const matchesCountry = !selectedCountry || course.country === selectedCountry;
      const matchesCategory = !selectedCategory || course.category === selectedCategory;
      const matchesPrice = !selectedPrice || course.priceTier === selectedPrice;

      if (matchesSearch && matchesCountry && matchesCategory && matchesPrice) {
        const subTabsHtml = Array.isArray(course.subTabs) ? course.subTabs.map(sub => `<li>${sub}</li>`).join('') : '';

        const courseCard = document.createElement('a');
        courseCard.href = course.pageLink;
        courseCard.className = 'course-card';
        courseCard.setAttribute('data-country', course.country);
        courseCard.setAttribute('data-category', course.category);
        courseCard.setAttribute('data-price', course.priceTier);
        courseCard.innerHTML = `
          <img src="${course.logoURL}" alt="${course.title}">
          <h2>${course.title}</h2>
          <p>${course.description}</p>
          <div class="price-info">Starting from €${course.startPrice}</div>
          <div class="sub-tabs">
            <ul>${subTabsHtml}</ul>
          </div>
        `;
        courseGrid.appendChild(courseCard);
      }
    });
  }

  async function initialize() {
    const coursesData = await fetchCourses();
    renderCourses(coursesData);

    searchInput.addEventListener('input', () => renderCourses(coursesData));
    countryFilter.addEventListener('change', () => renderCourses(coursesData));
    categoryFilter.addEventListener('change', () => renderCourses(coursesData));
    priceFilter.addEventListener('change', () => renderCourses(coursesData));
  }

  initialize();
</script>
